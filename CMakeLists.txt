PROJECT(ARGCV)

CMAKE_MINIMUM_REQUIRED(VERSION 2.8.8)

SET(GLO_VERSION_MAJOR 0)
SET(GLO_VERSION_MINOR 0.1)

SET(CMAKE_INSTALL_RPATH_USE_LINK_PATH YES)

SET(CMAKE_MACOSX_RPATH YES)

MESSAGE(STATUS "ARGCV CMAKE_INSTALL_PREFIX " ${CMAKE_INSTALL_PREFIX})
MESSAGE(STATUS "ARGCV CMAKE_MACOSX_RPATH " ${CMAKE_MACOSX_RPATH})

MESSAGE(STATUS "ARGCV BINARY_DIR " ${PROJECT_BINARY_DIR})
MESSAGE(STATUS "ARGCV SOURCE_DIR " ${PROJECT_SOURCE_DIR})

GET_DIRECTORY_PROPERTY(HAS_PARENT PARENT_DIRECTORY)

# REQUIREMENT CHECKER 
#FIND_PACKAGE(PkgConfig)
#PKG_CHECK_MODULES(GLIB2 REQUIRED glib-2.0>=2.10)
# PKG_CHECK_MODULES(LIBEVENT REQUIRED libevent)
#set(Boost_USE_STATIC_LIBS        ON)
#set(Boost_USE_MULTITHREADED      ON)
#set(Boost_USE_STATIC_RUNTIME    OFF)
#find_package(Boost COMPONENTS thread filesystem system program_options REQUIRED)

SET(CMAKE_C_FLAGS "$ENV{CFLAGS}  -Wall -g -O3 --std=c99")
SET(CMAKE_CXX_FLAGS " $ENV{CXXFLAGS}  -Wall -O3 --std=c++11")
# debug cmake  -DCMAKE_BUILD_TYPE=debug ..
SET(CMAKE_C_FLAGS_DEBUG "$ENV{CFLAGS}  -Wall -g -ggdb --std=c99")
SET(CMAKE_CXX_FLAGS_DEBUG " $ENV{CXXFLAGS}  -Wall -g -ggdb --std=c++11")
# release cmake  -DCMAKE_BUILD_TYPE=release ..
SET(CMAKE_C_FLAGS_RELEASE " $ENV{CFLAGS}  -Wall  -O3 --std=c99")
SET(CMAKE_CXX_FLAGS_RELEASE " $ENV{CXXFLAGS} -Wall -O3 --std=c++11")

SET (RESOURCE_FILE_LICENSE "${CMAKE_CURRENT_SOURCE_DIR}/LICENSE")

# INCLUDE DIRECTORIES
SET(ARGCV_INCLUDE_DIR ${PROJECT_SOURCE_DIR})

IF(HAS_PARENT)
    SET(ARGCV_INCLUDE_DIR ${PROJECT_SOURCE_DIR} PARENT_SCOPE)
ENDIF(HAS_PARENT)

INCLUDE_DIRECTORIES(${ARGCV_INCLUDE_DIR})

# LINK DIRECTORIES
LINK_DIRECTORIES(${PROJECT_BINARY_DIR}/lib)
SET(ARGCV_LIB_DIR ${PROJECT_BINARY_DIR}/lib)

IF(HAS_PARENT)
    SET(ARGCV_LIB_DIR ${ARGCV_LIB_DIR} PARENT_SCOPE)
ENDIF(HAS_PARENT)

LINK_DIRECTORIES(${ARGCV_LIB_DIR})

MESSAGE(STATUS "ARGCV_LIB_DIR " ${ARGCV_LIB_DIR})

SET(ARGCV_CMAKE_MODULE_PATH "${PROJECT_SOURCE_DIR}/cmake/Modules")

IF(HAS_PARENT)
    SET(ARGCV_CMAKE_MODULE_PATH ${ARGCV_CMAKE_MODULE_PATH} PARENT_SCOPE)
ENDIF(HAS_PARENT)

LIST(APPEND CMAKE_MODULE_PATH ${ARGCV_CMAKE_MODULE_PATH})


OPTION(OPTIONS_USE_EXTERNAL_CRFPP "OPTIONS_USE_EXTERNAL_CRFPP" OFF)
MESSAGE(STATUS "OPTIONS_USE_EXTERNAL_CRFPP : " ${OPTIONS_USE_EXTERNAL_CRFPP})

OPTION(OPTIONS_USE_EXTERNAL_MONGO_CXX "OPTIONS_USE_EXTERNAL_MONGO_CXX" OFF)
MESSAGE(STATUS "OPTIONS_USE_EXTERNAL_MONGO_CXX : " ${OPTIONS_USE_EXTERNAL_MONGO_CXX})

OPTION(OPTIONS_USE_EXTERNAL_LEVELDB "OPTIONS_USE_EXTERNAL_LEVELDB" ON)
MESSAGE(STATUS "OPTIONS_USE_EXTERNAL_LEVELDB : " ${OPTIONS_USE_EXTERNAL_LEVELDB})

OPTION(OPTIONS_USE_EXTERNAL_CURL "OPTIONS_USE_EXTERNAL_CURL" ON)
MESSAGE(STATUS "OPTIONS_USE_EXTERNAL_CURL : " ${OPTIONS_USE_EXTERNAL_CURL})


INCLUDE(ExternalProject) # IF NEED EXTEND PROJECT

IF(OPTIONS_USE_EXTERNAL_CRFPP)
    INCLUDE(ExternalCrfpp)
    INCLUDE_DIRECTORIES(${CRFPP_INCLUDE_DIR})
    MESSAGE(STATUS "CRFPP_INCLUDE_DIR " ${CRFPP_INCLUDE_DIR})
    LINK_DIRECTORIES(${CRFPP_LIB_DIR})
    #SET(CRFPP_INCLUDE_DIR ${CRFPP_INCLUDE_DIR} PARENT_SCOPE)
    #SET(CRFPP_LIB_DIR ${CRFPP_LIB_DIR} PARENT_SCOPE)
    #SET(CRFPP_LIBRARY ${CRFPP_LIBRARY} PARENT_SCOPE)
    #SET(CRFPP_LIBRARY_STATIC ${CRFPP_LIBRARY_STATIC} PARENT_SCOPE)
ENDIF(OPTIONS_USE_EXTERNAL_CRFPP)

IF(OPTIONS_USE_EXTERNAL_MONGO_CXX)
    INCLUDE(ExternalMongoCXX)
    INCLUDE_DIRECTORIES(${MONGO_CXX_INCLUDE_DIR})
    MESSAGE(STATUS "MONGO_CXX_INCLUDE_DIR " ${MONGO_CXX_INCLUDE_DIR})
    LINK_DIRECTORIES(${MONGO_CXX_LIB_DIR})
    #SET(MONGO_CXX_INCLUDE_DIR ${MONGO_CXX_INCLUDE_DIR} PARENT_SCOPE)
    #SET(MONGO_CXX_LIB_DIR ${MONGO_CXX_LIB_DIR} PARENT_SCOPE)
    #SET(MONGO_CXX_LIBRARY ${MONGO_CXX_LIBRARY} PARENT_SCOPE)
    #SET(MONGO_CXX_LIBRARY_STATIC ${MONGO_CXX_LIBRARY_STATIC} PARENT_SCOPE)
ENDIF(OPTIONS_USE_EXTERNAL_MONGO_CXX)

IF(OPTIONS_USE_EXTERNAL_LEVELDB)
    INCLUDE(ExternalLeveldb)
    INCLUDE_DIRECTORIES(${LEVELDB_INCLUDE_DIR})
    MESSAGE(STATUS "LEVELDB_INCLUDE_DIR " ${LEVELDB_INCLUDE_DIR})
    #SET(LEVELDB_INCLUDE_DIR ${LEVELDB_INCLUDE_DIR} PARENT_SCOPE)
    LINK_DIRECTORIES(${LEVELDB_LIB_DIR})
    #SET(LEVELDB_INCLUDE_DIR ${LEVELDB_INCLUDE_DIR} PARENT_SCOPE)
    #SET(LEVELDB_LIB_DIR ${LEVELDB_LIB_DIR} PARENT_SCOPE)
    #SET(LEVELDB_LIBRARY ${LEVELDB_LIBRARY} PARENT_SCOPE)
    #SET(LEVELDB_LIBRARY_STATIC ${LEVELDB_LIBRARY_STATIC} PARENT_SCOPE)
ENDIF(OPTIONS_USE_EXTERNAL_LEVELDB)

#SET(LEVELDB_INCLUDE_DIR ${leveldb_build})
#SET(LEVELDB_LIB_DIR ${leveldb_build})


ADD_SUBDIRECTORY(lib)


INCLUDE(CTest)
#ADD_TEST(evolution ${EXECUTABLE_OUTPUT_PATH}/percimpl evo )
ENABLE_TESTING()
ADD_SUBDIRECTORY(test)


